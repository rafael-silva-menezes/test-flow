name: Test-Flow CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'
          cache: true

      - name: Print Go version
        run: go version

      - name: Verify go.mod tidiness
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=3m ./...

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'
          cache: true

      - name: Print Go version
        run: go version

      - name: Run tests with coverage
        id: test
        run: |
          if [ -n "$(find . -name '*_test.go')" ]; then
            go test -v -coverprofile=coverage.out ./...
            echo "coverage=true" >> $GITHUB_OUTPUT
          else
            echo "No test files found. Skipping test step."
            echo "coverage=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload coverage report
        if: steps.test.outputs.coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build CLI
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.7'
          cache: true

      - name: Print Go version
        run: go version

      - name: Build CLI
        run: |
          mkdir -p dist
          go build -o dist/testflow ./cmd

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: testflow-binary
          path: dist/testflow
          retention-days: 1

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build] # Run after build to ensure binary is valid
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/test-flow:latest
